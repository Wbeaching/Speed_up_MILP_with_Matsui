'''
Created on 20180402

@author: Administrator
'''
from CryptoMIP import *

S = [0xC, 0x5, 0x6, 0xB, 0x9, 0x0, 0xA, 0xD, 0x3, 0xE, 0xF, 0x8, 0x4, 0x7, 0x1, 0x2]

DDT = [[16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \
[0, 0, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0], \
[0, 0, 0, 2, 0, 4, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0], \
[0, 2, 0, 2, 2, 0, 4, 2, 0, 0, 2, 2, 0, 0, 0, 0], \
[0, 0, 0, 0, 0, 4, 2, 2, 0, 2, 2, 0, 2, 0, 2, 0], \
[0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 4, 2, 0, 0], \
[0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 0, 0, 4], \
[0, 4, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 4], \
[0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 4, 0, 2, 0, 4], \
[0, 0, 2, 0, 4, 0, 2, 0, 2, 0, 0, 0, 2, 0, 4, 0], \
[0, 0, 2, 2, 0, 4, 0, 0, 2, 0, 2, 0, 0, 2, 2, 0], \
[0, 2, 0, 0, 2, 0, 0, 0, 4, 2, 2, 2, 0, 2, 0, 0], \
[0, 0, 2, 0, 0, 4, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0], \
[0, 2, 4, 2, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0], \
[0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0], \
[0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4]]

    
'''
patterns = set({})
for i in range(0, 16):
    for j in range(0, 16):
        if DDT[i][j] > 3:
            patterns.add(tuple(BasicTools.wordToBinaryString(i, 4) + BasicTools.wordToBinaryString(j, 4) + BasicTools.wordToBinaryString(DDT[i][j], 2)))

for i in range(16):
    if DDT[i][10]!=0:
        patterns.add(tuple(BasicTools.wordToBinaryString(i, 4) + BasicTools.wordToBinaryString(10, 4)))

# for v in patterns:
# print(v)


First_diff_pattern = [(1, 0, 0, 0, 1, 1, 1, 1, 1),
(1, 1, 0, 0, 1, 0, 1, 0, 1),
(0, 1, 0, 1, 1, 0, 1, 0, 1),
(0, 0, 0, 1, 1, 0, 0, 1, 1),
(1, 0, 1, 0, 1, 0, 1, 0, 1),
(1, 1, 1, 1, 1, 1, 1, 0, 1),
(0, 1, 0, 1, 1, 1, 0, 0, 1),
(1, 0, 0, 1, 0, 1, 0, 0, 1),
(1, 0, 0, 1, 1, 1, 1, 0, 1),
(1, 0, 1, 1, 1, 0, 1, 0, 1),
(1, 0, 1, 1, 1, 0, 0, 0, 1),
(1, 1, 0, 1, 0, 0, 1, 0, 1),
(1, 1, 1, 1, 0, 0, 0, 1, 1),
(0, 1, 0, 0, 1, 0, 1, 0, 1),
(0, 0, 0, 1, 1, 1, 0, 1, 1),
(1, 1, 1, 1, 1, 1, 1, 1, 1),
(1, 1, 0, 1, 1, 0, 1, 0, 1),
(1, 0, 0, 0, 1, 0, 1, 1, 1),
(0, 1, 1, 0, 1, 0, 1, 1, 1),
(0, 0, 1, 0, 0, 1, 0, 1, 1),
(0, 0, 0, 0, 0, 0, 0, 0, 0),
(0, 1, 1, 0, 1, 1, 1, 1, 1),
(0, 1, 1, 1, 1, 1, 1, 1, 1),
(0, 0, 1, 0, 1, 0, 1, 0, 1),
(1, 0, 1, 0, 0, 1, 0, 1, 1),
(0, 0, 0, 1, 0, 0, 1, 1, 1),
(1, 1, 0, 0, 0, 1, 0, 1, 1),
(1, 1, 1, 1, 0, 1, 0, 0, 1),
(0, 0, 0, 1, 0, 1, 1, 1, 1),
(0, 1, 1, 1, 0, 0, 0, 1, 1),
(0, 1, 0, 0, 0, 1, 0, 1, 1),
(0, 0, 1, 1, 0, 1, 1, 0, 1),
(0, 0, 1, 1, 1, 0, 1, 0, 1)]





H = Inequalities("First_equalities.txt")
S = H.greedy_Seclection(25, BasicTools.interestedSpace(4, 5))
for t in S:
    print(str(t[0]) + ',\\')
    

12 allVectorofdim(9)
S_T_First=[(-1, -8, 7, -3, -2, 4, -2, -11, 16, 0),\
(1, 3, -3, 1, -4, -5, 2, 3, 5, 0),\
(0, 1, 1, 2, 2, 3, 2, 1, -5, 0),\
(-3, -1, -2, 3, 4, -2, -6, 0, 7, 0),\
(-1, -2, -2, 1, -4, -1, 5, -2, 6, 0),\
(0, 3, -2, -1, -1, 0, -1, -3, 5, 0),\
(4, -1, 1, 1, 5, 2, 3, 6, -7, 0),\
(3, -5, -1, 0, 3, -1, -2, 2, 4, 0),\
(3, 5, 5, 4, 1, 0, 1, 2, -7, 0),\
(-5, -2, 2, -3, -3, -1, 4, -1, 9, 0),\
(-1, -1, -3, 0, 2, 1, -3, 0, 5, 0),\
(0, 1, 1, 0, 0, 1, 0, 1, -1, 0)]

11 interestedSpace(4, 5)
S_T_First=(-1, -8, 7, -3, -2, 4, -2, -11, 16, 0),\
(-3, -1, -2, 3, 4, -2, -6, 0, 7, 0),\
(3, 1, 1, 2, 2, 3, 5, 4, -8, 0),\
(-1, -2, -2, 1, -4, -1, 5, -2, 6, 0),\
(0, 3, -2, -1, -1, -1, -1, -2, 5, 0),\
(1, -3, 3, 1, 2, -5, -4, 3, 5, 0),\
(0, 2, -1, 1, 4, 3, 1, 2, -4, 0),\
(0, 1, 2, 0, -1, 1, 1, 2, -1, 0),\
(3, -1, -4, 0, -1, -1, 2, 2, 3, 0),\
(0, 2, 2, 1, 1, 0, 1, -1, -1, 0),\
(-1, -1, -3, 0, 2, 1, -3, 0, 5, 0)]


'''

patterns1 = set({})
for i in range(0, 16):
    for j in range(0, 16):
        if DDT[i][j] > 3:
            patterns1.add(tuple(BasicTools.wordToBinaryString(i, 4) + BasicTools.wordToBinaryString(j, 4)))

for j in range(16):
    if DDT[14][j] != 0:
        patterns1.add(tuple(BasicTools.wordToBinaryString(14, 4) + BasicTools.wordToBinaryString(j, 4)))
for v in patterns1:
    print(v)

End_diff_patterns = [(0, 0, 1, 1, 0, 1, 1, 0, 1),
(1, 1, 1, 0, 1, 1, 0, 0, 1),
(1, 1, 1, 0, 1, 1, 0, 1, 1),
(0, 1, 1, 0, 1, 0, 1, 1, 1),
(0, 1, 0, 0, 0, 1, 0, 1, 1),
(1, 1, 0, 1, 0, 0, 1, 0, 1),
(1, 1, 1, 0, 1, 0, 0, 1, 1),
(1, 1, 1, 0, 0, 0, 1, 1, 1),
(1, 1, 1, 0, 0, 0, 1, 0, 1),
(0, 0, 1, 0, 0, 1, 0, 1, 1),
(1, 1, 0, 0, 0, 1, 0, 1, 1),
(1, 0, 1, 0, 0, 1, 0, 1, 1),
(1, 1, 1, 1, 0, 1, 0, 0, 1),
(1, 1, 1, 0, 0, 1, 1, 0, 1),
(0, 0, 0, 1, 0, 1, 1, 1, 1),
(1, 1, 1, 1, 0, 0, 0, 1, 1),
(0, 0, 0, 0, 0, 0, 0, 0, 0),
(1, 0, 0, 0, 1, 0, 1, 1, 1),
(0, 1, 1, 1, 0, 0, 0, 1, 1),
(0, 1, 1, 1, 1, 1, 1, 1, 1),
(0, 1, 0, 1, 1, 1, 0, 0, 1),
(1, 1, 1, 1, 1, 1, 1, 1, 1),
(0, 0, 0, 1, 1, 0, 0, 1, 1),
(1, 1, 1, 0, 1, 0, 0, 0, 1),
(0, 0, 0, 1, 0, 0, 1, 1, 1),
(1, 0, 1, 1, 1, 0, 0, 0, 1),
(1, 0, 0, 1, 1, 1, 1, 0, 1),
(0, 1, 1, 0, 1, 1, 1, 1, 1),
(1, 1, 1, 1, 1, 1, 1, 0, 1),
(1, 0, 0, 0, 1, 1, 1, 1, 1),
(1, 0, 0, 1, 0, 1, 0, 0, 1),
(1, 1, 1, 0, 0, 1, 1, 1, 1),
(0, 0, 0, 1, 1, 1, 0, 1, 1)]

H = Inequalities("End_equalities.txt")
S = H.greedy_Seclection(15, BasicTools.allVectorsOfDim(9))
for t in S:
    print(str(t[0]) + ',\\')

'''
interestedSpace(4, 5) 13
S_T_End=[(-1, -8, 7, -3, -2, 4, -2, -9, 14, 0),\
(-1, 3, -4, 2, -2, -1, -2, 1, 5, 0),\
(5, 4, 4, 6, 1, 3, 1, 7, -14, 0),\
(-2, 4, -3, -6, 1, -2, 1, -3, 10, 0),\
(4, -2, -2, 2, 1, 0, 1, 3, -1, 0),\
(-3, -1, 2, -2, -2, 0, 2, -1, 5, 0),\
(-6, 5, -3, -4, 3, 1, -4, -2, 10, 0),\
(4, -6, 1, -4, 5, -3, -2, 1, 8, 0),\
(3, 2, -1, 0, -4, 0, -1, 2, 2, 0),\
(-1, 3, 3, 4, 5, 7, 5, 1, -10, 0),\
(1, -2, -2, 0, 1, -2, 1, -1, 5, 0),\
(-1, -1, -1, -1, -1, 2, -1, 0, 4, 0),\
(2, -1, 1, 0, -1, 0, -3, 2, 2, 0)]

allVectorsOfDim(9) 12
S_T_End=[(-1, -8, 7, -3, -2, 4, -2, -9, 14, 0),\
(5, 4, 4, 6, 1, 3, 1, 7, -14, 0),\
(-2, 4, -4, -7, 1, -3, 2, -3, 12, 0),\
(-1, 2, -3, 1, -1, 0, -2, 0, 4, 0),\
(4, -2, -2, 2, 1, 0, 1, 3, -1, 0),\
(-3, -1, 2, -2, -2, 0, 2, -1, 5, 0),\
(-6, 5, -3, -4, 3, 1, -4, -2, 10, 0),\
(1, 0, 2, 1, 1, -1, -1, 2, -1, 0),\
(-1, 3, 3, 4, 5, 7, 5, 1, -10, 0),\
(1, -2, -2, 0, 1, -2, 1, -1, 5, 0),\
(4, 2, 2, 3, -1, 0, -1, 2, -4, 0),\
(-1, -1, -1, -1, -1, 2, -1, 0, 4, 0)]
'''
